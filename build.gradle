/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

group = "ch.weetech"
archivesBaseName = "common-java"
version = "0.0.9"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:31.1-jre'

    // https://mvnrepository.com/artifact/javax.mail/javax.mail-api
    //implementation 'javax.mail:javax.mail-api:1.6.2'
    // https://mvnrepository.com/artifact/javax.activation/activation
    //implementation 'javax.activation:activation:1.1'
    implementation 'com.sun.mail:jakarta.mail:1.6.7'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:1.7.36'
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    implementation 'mysql:mysql-connector-java:8.0.33'


    // JUnit 5 (jupiter) and mockito dependencies
    // Since the mockito-inline library replaced the mockito-core library it is possible to mock final classes and static methods
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    testImplementation 'org.mockito:mockito-inline:4.11.0'
    // Note that junit-jupiter-engine is the main JUnit 5 library, and junit-platform-launcher is used with the Maven plugin and IDE launcher.
    testImplementation 'org.junit.platform:junit-platform-launcher:1.9.3'
    // Maven Surefire plugin to run our test classes using the new JUnit platform launcher
    testImplementation 'org.junit.platform:junit-platform-surefire-provider:1.3.2'
    // JUnit4 (vintage) compatible, for IDEs that have no support for JUnit 5 yet, let's include these dependencies
    testImplementation 'org.junit.platform:junit-platform-runner:1.9.3'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.9.3'
    // Mockito provides an implementation for JUnit5 extensions in the library mockito-junit-jupiter
    testImplementation 'org.mockito:mockito-junit-jupiter:4.11.0'

    // power mockito does not work with junit5 yet
    //testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'

}

test {
    useJUnitPlatform()
}

//---- dump all current dependencies to dependencies dir
task copyDependencies(type: Copy) {
   from configurations.compileClasspath
   into 'dependencies'
}
//---- dump all current dependencies to dependencies dir

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'common-java'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'java common utilities'
        url 'https://github.com/jasonwee/common_java'

        scm {
          connection 'scm:git:git://github.com/jasonwee/common_java.git'
          developerConnection 'scm:git:ssh://github.com:jasonwee/common_java.git'
          url 'https://github.com/jasonwee/common_java.git'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'jasonwee'
            name 'Jason Wee'
            email 'jason@weetech.ch'
          }
        }
      }
    }
  }
}

eclipse {
  classpath {
    downloadJavadoc = true
    downloadSources = true
  }
}
